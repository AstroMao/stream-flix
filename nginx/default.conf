# /etc/nginx/sites-available/streaming

proxy_hide_header 'Access-Control-Allow-Origin';

# Map to extract real IP from X-Forwarded-For header
map $http_x_forwarded_for $real_client_ip {
    ~^([^,\s]+) $1;  # Get first IP from comma-separated list
    default $remote_addr;
}

# Map to check allowed referers for streaming
map $http_referer $allowed_streaming_referer {
    ~^https://doonung66\.com                  1;
    ~^https://www\.doonung66\.com             1;
    ~^https://doonung66\.b-cdn\.net           1; 
    ~^https://stream-vault-media\.b-cd\n.net  1;
    ~^https://player\.doonung66\.com          1;
    ~^https://finnhd\.com	                  1;
    ~^https://flimzone\.com		              1;
    ~^https://www\.finnhd\.com                1;
    ~^https://www\.flimzone\.com              1;
    default                                   0;
}

map $http_origin $allowed_streaming_origin {
    ~^https://doonung66\.com$                 $http_origin;
    ~^https://doonung66\.b-cdn\.net$	     $http_origin;
    ~^https://www\.doonung66\.com$            $http_origin;
    ~^https://stream-vault-media\.b-cd\n.net$ $http_origin;
    ~^https://player\.doonung66\.com$         $http_origin;
    ~^https://finnhd\.com$                    $http_origin;
    ~^https://flimzone\.com$                  $http_origin;
    ~^https://www\.finnhd\.com$               $http_origin;
    ~^https://www\.flimzone\.com$             $http_origin;
    default                                   "";
}

server {
    listen 8080;
    server_name localhost;

    # --- Locations for client Pages ---

        # --- NEW: Location for serving the React Frontend ---
    # This block will be the catch-all. It serves the static files
    # from your React application's build directory.
    location / {
        # IMPORTANT: Update this path to point to your React app's build output directory
        root /mnt/bedDrive/Works/CODE/StreamFlix/client/dist; 
        
        # This is the crucial part for single-page applications (SPAs) like React.
        # It tries to find the file directly, then a directory, and if neither exists,
        # it falls back to serving index.html. This allows client-side routing to work.
        try_files $uri $uri/ /index.html;
    }

    # --- NEW: Location for our Node.js Backend API ---
    # This block will catch any requests to /server-api/... and forward them
    # to your Node.js server running on port 3001.
    location /server-api/ {
        proxy_pass http://127.0.0.1:3001/; # Forward to the Node.js server
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $real_client_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- PocketBase API Proxy ---
    location /api/ {
        proxy_pass http://127.0.0.1:8090/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_client_ip;  # Use extracted real IP
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;  # Force https since it comes through Traefik
        
        # Add CORS headers for API access
        add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # PocketBase Admin UI
    location /_/ {
        proxy_pass http://127.0.0.1:8090/_/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_client_ip;  # Use extracted real IP
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;  # Force https
        
        # Add CORS headers for Admin UI access
        add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # --- HLS Streaming Location (PROTECTED) ---
    location /stream/ {
        # Check if request comes from allowed domains
        if ($allowed_streaming_referer = 0) {
            return 403 "Access denied - streaming only allowed from doonung66.com";
        }

        alias /mnt/media/;
        
        # Add MIME types for HLS
        types {
            application/vnd.apple.mpegurl m3u8;
            video/mp2t ts;
            video/mp4 mp4;
            video/x-matroska mkv;
        }

        # Restrictive CORS headers - only allow your streaming domain
        add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Additional security headers
        add_header 'X-Frame-Options' 'SAMEORIGIN' always;
        add_header 'X-Content-Type-Options' 'nosniff' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $allowed_streaming_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        try_files $uri $uri/ =404;
	}
}